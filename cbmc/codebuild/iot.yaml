---
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  GitHubToken:
    Type: String

  NotificationAddress:
    Type: String

  ProjectName:
    Type: String
    Default: "FreeRTOS"

Resources:
  BatchCodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: "CBMC-batch"
      RepositoryDescription: "PicaPica-synchronized copy of gitfarm CBMC-batch"

  CoverageCodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: "CBMC-coverage"
      RepositoryDescription: "PicaPica-synchronized copy of gitfarm CBMC-coverage"

  PicaPicaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: prod.picapica.aws.internal
          Action: sts:AssumeRole
      RoleName: "picapica-role"
      Policies:
        - PolicyName: !Sub "picapica-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - codecommit:GetRepository
                  - codecommit:GitPush
                  - codecommit:UpdateDefaultBranch
                  - picapica:GetDestination
                  - picapica:PutDestination
                  - picapica:ListDestinations
                  - picapica:DeleteDestination
                Effect: Allow
                Resource:
                  - !GetAtt BatchCodeCommitRepository.Arn
                  - !Sub "arn:aws:picapica:${AWS::Region}:${AWS::AccountId}:/destinations/CBMC-batch"
                  - !GetAtt CoverageCodeCommitRepository.Arn
                  - !Sub "arn:aws:picapica:${AWS::Region}:${AWS::AccountId}:/destinations/CBMC-coverage"

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-rtos-build-${AWS::Region}"

  DockerBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      RoleName: !Sub "dockerbuild-role-${AWS::Region}"
      Policies:
        - PolicyName: !Sub "dockerbuild-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ecr:CreateRepository
                  - ecr:GetAuthorizationToken
                  - ecr:DescribeRepositories
                Effect: Allow
                Resource: "*"
              - Action:
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                  - ecr:BatchCheckLayerAvailability
                Effect: Allow
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/cbmc"
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource: !Join ["/", [!GetAtt S3Bucket.Arn, "*"]]

  DockerBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:17.09.0
        Type: LINUX_CONTAINER
      Name: docker-build
      ServiceRole: !Ref DockerBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            build:
              commands:
                - |
                  if ! aws ecr describe-repositories | grep -q '"cbmc"'
                  then
                    aws ecr create-repository --repository-name cbmc
                  fi
                - $(aws ecr get-login --region ${AWS::Region} | sed 's/-e none//')
                - >
                  make -C docker
                  REPO=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/cbmc
                - >
                  make -C docker install
                  REPO=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/cbmc

  UpdateLambaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      RoleName: !Sub "updatelambda-role-${AWS::Region}"
      Policies:
        - PolicyName: !Sub "updatelambda-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource: !Join ["/", [!GetAtt S3Bucket.Arn, "*"]]
              - Action:
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                Effect: Allow
                Resource:
                  - !GetAtt InvokeBatchLambda.Arn
                  - !GetAtt BatchStatusLambda.Arn
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"

  UpdateLambda:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/ubuntu-base:14.04
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: LAMBDA_INVOKE_FUNCTION
            Type: PLAINTEXT
            Value: !Ref InvokeBatchLambda
          - Name: LAMBDA_STATUS_FUNCTION
            Type: PLAINTEXT
            Value: !Ref BatchStatusLambda
          - Name: S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref S3Bucket
      Name: update-lambda
      ServiceRole: !Ref UpdateLambaRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - apt-get update
                - apt-get -y install python-virtualenv python-pip
            build:
              commands:
                - make -C pkg-batch BATCHDIR=..
                - >
                  aws s3 cp pkg-batch/cbmc-batch.tar.gz
                  "s3://$S3_BUCKET/package/cbmc-batch.tar.gz"
                - mv bin/cbmc-batch bin/cbmc_batch.py
                - mv bin/cbmc-status bin/cbmc_status.py
                - zip -j batch.zip bin/*
                - zip -j -g batch.zip lambda-codepipeline/*.py
                - |
                  virtualenv venv
                  . venv/bin/activate
                  pip install pyyaml
                  pip install awscli
                  pip install future
                  cd venv/lib/python2.7/site-packages
                  zip -g -r ../../../../batch.zip *
                  cd ../../../../
                  cp venv/bin/aws .
                  sed -i '1s@.*@#!/usr/bin/python@' aws
                  zip -g batch.zip aws
                - aws s3 cp batch.zip "s3://$S3_BUCKET/lambda-batch/batch.zip"
                - >
                  aws lambda update-function-code
                  --function-name $LAMBDA_INVOKE_FUNCTION
                  --s3-bucket $S3_BUCKET --s3-key lambda-batch/batch.zip
                - >
                  aws lambda update-function-configuration
                  --function-name $LAMBDA_INVOKE_FUNCTION
                  --handler trigger.lambda_handler
                - >
                  aws lambda update-function-code
                  --function-name $LAMBDA_STATUS_FUNCTION
                  --s3-bucket $S3_BUCKET --s3-key lambda-batch/batch.zip
                - >
                  aws lambda update-function-configuration
                  --function-name $LAMBDA_STATUS_FUNCTION
                  --handler check_status.lambda_handler
                - |
                  cd pkg-cbmc
                  tar czf patches.tar.gz patches
                  aws s3 cp patches.tar.gz \
                    "s3://$S3_BUCKET/package/cbmc-patches.tar.gz"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      RoleName: !Sub "codebuild-role-${AWS::Region}"
      Policies:
        - PolicyName: !Sub "codebuild-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource: !Join ["/", [!GetAtt S3Bucket.Arn, "*"]]
              - Action:
                  - s3:ListBucket
                Effect: Allow
                Resource: !GetAtt S3Bucket.Arn
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
              - Action:
                  - ssm:GetParameters
                Effect: Allow
                Resource: "*"

  PackageViewer:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/ubuntu-base:14.04
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref S3Bucket
      Name: package-viewer
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - mkdir /tmp/cbmc-viewer
                - mv * /tmp/cbmc-viewer/
                - mv /tmp/cbmc-viewer .
                - tar czf cbmc-viewer.tar.gz cbmc-viewer
                - >
                  aws s3 cp cbmc-viewer.tar.gz
                  "s3://$S3_BUCKET/package/cbmc-viewer.tar.gz"

  CBMCLinuxBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/ubuntu-base:14.04
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref S3Bucket
      Name: goto-cc-build
      ServiceRole: !Ref CodeBuildRole
      Cache:
        Type: S3
        Location: !Join ["/", [!GetAtt S3Bucket.Arn, "cbmc-linux-build-cache"]]
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - add-apt-repository ppa:ubuntu-toolchain-r/test -y
                - apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA9EF27F
                - apt-get update -y
                - apt-get install -y g++-5 flex bison make git libwww-perl patch ccache
                - update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 1
                - update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 1
            build:
              commands:
                - |
                  aws s3 cp "s3://$S3_BUCKET/package/cbmc-patches.tar.gz" patches.tar.gz
                  tar xzf patches.tar.gz
                  for p in patches/*
                  do
                    patch -p1 < $p
                  done
                - make -C src minisat2-download
                - make -C src CXX="ccache g++" -j8
                - ccache -s
            post_build:
              commands:
                - |
                  for b in cbmc goto-cc goto-instrument goto-analyzer
                  do
                    aws s3 cp src/$b/$b "s3://$S3_BUCKET/cbmc/$b"
                  done
                - |
                  cd src
                  cp goto-analyzer/goto-analyzer cbmc/
                  cp goto-instrument/goto-instrument cbmc/
                  tar czf cbmc.tar.gz cbmc/cbmc cbmc/goto-analyzer cbmc/goto-instrument
                  aws s3 cp cbmc.tar.gz "s3://$S3_BUCKET/package/cbmc.tar.gz"
          artifacts:
            files:
              - src/cbmc/cbmc
              - src/goto-cc/goto-cc
              - src/goto-instrument/goto-instrument
              - src/goto-analyzer/goto-analyzer
            discard-paths: yes
          cache:
            paths:
            - '/var/cache/apt/**/*'
            - '/var/lib/apt/lists/**/*'
            - '/root/.ccache/**/*'

  InfrastructurePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      RoleName: !Sub "infrastructurepipeline-role-${AWS::Region}"
      Policies:
        - PolicyName: !Sub "infrastructurepipeline-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Effect: Allow
                Resource:
                  - !GetAtt BatchCodeCommitRepository.Arn
                  - !GetAtt CoverageCodeCommitRepository.Arn
              - Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Effect: Allow
                Resource:
                  - !GetAtt CBMCLinuxBuild.Arn
                  - !GetAtt DockerBuild.Arn
                  - !GetAtt UpdateLambda.Arn
                  - !GetAtt PackageViewer.Arn
              - Action:
                  - s3:PutObject
                Effect: Allow
                Resource: !Join ["/", [!GetAtt S3Bucket.Arn, "*"]]

  InfrastructurePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: "batch-pipeline"
      RoleArn: !GetAtt InfrastructurePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref S3Bucket
      Stages:
        - Name: "Source"
          Actions:
            - Name: "CBMC"
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: diffblue
                Repo: cbmc
                Branch: develop
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: True
              OutputArtifacts:
                - Name: "cbmc-src"
            - Name: "Batch-CodeCommit"
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: !GetAtt BatchCodeCommitRepository.Name
                BranchName: master
              OutputArtifacts:
                - Name: "batch-src"
            - Name: "Viewer-CodeCommit"
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: !GetAtt CoverageCodeCommitRepository.Name
                BranchName: master
              OutputArtifacts:
                - Name: "view-src"
        - Name: "Build"
          Actions:
            - Name: "Docker-Build"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref DockerBuild
              InputArtifacts:
                - Name: "batch-src"
              RunOrder: 1
            - Name: "Update-Lambda"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref UpdateLambda
              InputArtifacts:
                - Name: "batch-src"
              RunOrder: 1
            - Name: "Package-Viewer"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref PackageViewer
              InputArtifacts:
                - Name: "view-src"
              RunOrder: 1
            - Name: "CBMC-Linux"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CBMCLinuxBuild
              InputArtifacts:
                - Name: "cbmc-src"
              RunOrder: 2

  SnsInfrastructureTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Amazon FreeRTOS Verification Infrastructure"
      TopicName: "amazon-freertos-verification-infrastructure"

  SnsInfrastructureSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref NotificationAddress
      Protocol: email
      TopicArn: !Ref SnsInfrastructureTopic

  InfrastructureEventTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref SnsInfrastructureTopic
      Topics:
        - !Ref SnsInfrastructureTopic

  InfrastructureEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "CodePipeline failure rule"
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - "CodePipeline Action Execution State Change"
        detail:
          state:
            - FAILED
          pipeline:
            - !Ref InfrastructurePipeline
      State: ENABLED
      Targets:
        - Arn: !Ref SnsInfrastructureTopic
          Id: "InfrastructurePipelineTopic"
          InputTransformer:
            InputTemplate: !Sub '"The pipeline <state> at stage <stage> to perform <action>. Go to https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/"'
            InputPathsMap:
              state: "$.detail.state"
              stage: "$.detail.stage"
              action: "$.detail.action"

  CodePipelineLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "codepipelinelambda-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Action:
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                Effect: Allow
                Resource: "*"
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource: !Join ["/", [!GetAtt S3Bucket.Arn, "*"]]
              - Action:
                  - s3:ListBucket
                Effect: Allow
                Resource: !GetAtt S3Bucket.Arn
              - Action:
                  - batch:DescribeJobQueues
                  - batch:DescribeJobDefinitions
                  - batch:SubmitJob
                  - batch:ListJobs
                Effect: Allow
                Resource: "*"
              - Action:
                  - cloudwatch:PutMetricData
                Effect: Allow
                Resource: "*"

  InvokeBatchLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def hello(world):
            print "hello " + world
      Handler: index.hello
      Role: !GetAtt CodePipelineLambdaRole.Arn
      Runtime: python2.7
      Timeout: 300
      MemorySize: 512

  BatchStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def hello(world):
            print "hello " + world
      Handler: index.hello
      Role: !GetAtt CodePipelineLambdaRole.Arn
      Runtime: python2.7
      Timeout: 60

  CBMCWindowsBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/windows-base:1.0
        Type: WINDOWS_CONTAINER
        EnvironmentVariables:
          - Name: S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref S3Bucket
      Name: goto-cl-build
      ServiceRole: !Ref CodeBuildRole
      Cache:
        Type: S3
        Location: !Join ["/", [!GetAtt S3Bucket.Arn, "cbmc-windows-build-cache"]]
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - choco install cyg-get -y --no-progress
                - cyg-get bash patch bison flex make wget
                - nuget install clcache -OutputDirectory "C:\tools" -ExcludeVersion -Version 4.1.0
            build:
              commands:
                - |
                  $env:Path = "C:\tools\cygwin\bin;$env:Path"
                  bash -c "make -C src minisat2-download DOWNLOADER=wget"
                - |
                  $env:Path = "C:\tools\cygwin\bin;C:\tools\clcache\clcache-4.1.0;$env:Path"
                  $env:CLCACHE_DIR = "C:\clcache"
                  $env:CLCACHE_BASEDIR = (Get-Item -Path ".\").FullName
                  cmd /c 'call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x64 && bash -c "make CXX=clcache.exe -j8 -C src BUILD_ENV=MSVC"'
                - |
                  # display cache stats
                  $env:Path = "C:\tools\cygwin\bin;C:\tools\clcache\clcache-4.1.0;$env:Path"
                  $env:CLCACHE_DIR = "C:\clcache"
                  cmd /c 'clcache -s'
            post_build:
              commands:
                - >
                  aws s3 cp src/cbmc/cbmc.exe
                  "s3://$env:S3_BUCKET/cbmc/cbmc.exe"
                - >
                  aws s3 cp src/goto-cc/goto-cc.exe
                  "s3://$env:S3_BUCKET/cbmc/goto-cc.exe"
                - >
                  aws s3 cp src/goto-instrument/goto-instrument.exe
                  "s3://$env:S3_BUCKET/cbmc/goto-instrument.exe"
                - >
                  aws s3 cp src/goto-analyzer/goto-analyzer.exe
                  "s3://$env:S3_BUCKET/cbmc/goto-analyzer.exe"
          artifacts:
            files:
              - src/cbmc/cbmc.exe
              - src/goto-cc/goto-cc.exe
              - src/goto-instrument/goto-instrument.exe
              - src/goto-analyzer/goto-analyzer.exe
            discard-paths: yes
          cache:
            paths:
                - 'C:\clcache\**\*'

  RTOSPipelinedNativeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/windows-base:1.0
        Type: WINDOWS_CONTAINER
      Name: freertos-native-build
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            build:
              commands:
                - >
                  (Get-Content
                  demos\pc\windows\visual_studio\aws_demos.vcxproj).replace(
                  'v141', 'v140') |
                  Set-Content demos\pc\windows\visual_studio\aws_demos.vcxproj
                - >
                  (Get-Content
                  tests\pc\windows\visual_studio\aws_tests.vcxproj).replace(
                  'v141', 'v140') |
                  Set-Content tests\pc\windows\visual_studio\aws_tests.vcxproj
                - |
                  $env:Path = "C:\Program Files (x86)\MSBuild\14.0\Bin;$env:Path"
                  msbuild /p:Platform=win32 /m:8 demos\pc\windows\visual_studio\aws_demos.sln
                - |
                  $env:Path = "C:\Program Files (x86)\MSBuild\14.0\Bin;$env:Path"
                  msbuild /p:Platform=win32 /m:8 tests\pc\windows\visual_studio\aws_tests.sln

  RTOSPipelinedNativeAnalysis:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/windows-base:1.0
        Type: WINDOWS_CONTAINER
      Name: freertos-native-analysis
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            build:
              commands:
                - >
                  (Get-Content
                  demos\pc\windows\visual_studio\aws_demos.vcxproj).replace(
                  'v141', 'v140') |
                  Set-Content demos\pc\windows\visual_studio\aws_demos.vcxproj
                - >
                  (Get-Content
                  tests\pc\windows\visual_studio\aws_tests.vcxproj).replace(
                  'v141', 'v140') |
                  Set-Content tests\pc\windows\visual_studio\aws_tests.vcxproj
                - |
                  $env:Path = "C:\Program Files (x86)\MSBuild\14.0\Bin;$env:Path"
                  msbuild /fl /flp:logfile=pc_demos.txt /p:RunCodeAnalysis=true /p:Platform=win32 /m:8 demos\pc\windows\visual_studio\aws_demos.sln
                - |
                  $env:Path = "C:\Program Files (x86)\MSBuild\14.0\Bin;$env:Path"
                  msbuild /fl /flp:logfile=pc_tests.txt /p:RunCodeAnalysis=true /p:Platform=win32 /m:8 tests\pc\windows\visual_studio\aws_tests.sln
          artifacts:
            files:
              - pc_demos.txt
              - pc_tests.txt
            discard-paths: no

  RTOSCodeCommitAnalysisToS3:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/ubuntu-base:14.04
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref S3Bucket
      Name: freertos-codeanalysis-to-s3
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - aws s3 sync --delete . "s3://$S3_BUCKET/rtos-arg-vs-codeanalysis/"

  RTOSPipelinedGotoCLBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/windows-base:1.0
        Type: WINDOWS_CONTAINER
        EnvironmentVariables:
          - Name: S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref S3Bucket
      Name: freertos-codecommit-goto-cl-build
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - pip install massedit
            build:
              commands:
                - New-Item -ItemType directory -Path C:\tools\cbmc
                - >
                  aws s3 cp "s3://$env:S3_BUCKET/cbmc/goto-cc.exe"
                  'C:\tools\cbmc\'
                - cp C:\tools\cbmc\goto-cc.exe C:\tools\cbmc\goto-cl.exe
                - cp C:\tools\cbmc\goto-cc.exe C:\tools\cbmc\goto-link.exe
                - >
                  (Get-Content
                  demos\pc\windows\visual_studio\aws_demos.vcxproj).replace(
                  'v141', 'v140') |
                  Set-Content demos\pc\windows\visual_studio\aws_demos.vcxproj
                - >
                  (Get-Content
                  tests\pc\windows\visual_studio\aws_tests.vcxproj).replace(
                  'v141', 'v140') |
                  Set-Content tests\pc\windows\visual_studio\aws_tests.vcxproj
                - >
                  (Get-Content
                  demos\pc\windows\visual_studio\aws_demos.vcxproj).replace(
                  '<BrowseInformation>true', '<BrowseInformation>false') |
                  Set-Content demos\pc\windows\visual_studio\aws_demos.vcxproj
                - >
                  (Get-Content
                  tests\pc\windows\visual_studio\aws_tests.vcxproj).replace(
                  '<BrowseInformation>true', '<BrowseInformation>false') |
                  Set-Content tests\pc\windows\visual_studio\aws_tests.vcxproj
                - >
                  python -m massedit -w -e
                  "re.sub(r'#include .FreeRTOS.h.', '#include <FreeRTOS.h>\n#include <task.h>', line)"
                  tests/common/defender/aws_test_defender.c
                - |
                  $env:Path = "C:\tools\cbmc;C:\Program Files (x86)\MSBuild\14.0\Bin;$env:Path"
                  msbuild /p:CLToolExe=goto-cl.exe /p:LinkToolExe=goto-link.exe /p:Platform=win32 /m:8 demos\pc\windows\visual_studio\aws_demos.sln
                - |
                  $env:Path = "C:\tools\cbmc;C:\Program Files (x86)\MSBuild\14.0\Bin;$env:Path"
                  msbuild /p:CLToolExe=goto-cl.exe /p:LinkToolExe=goto-link.exe /p:Platform=win32 /m:8 tests\pc\windows\visual_studio\aws_tests.sln
          artifacts:
            files:
              - demos/pc/windows/visual_studio/Debug/**/*
              - tests/pc/windows/visual_studio/Debug/**/*
            discard-paths: no

  RTOSPipelinedHarnessBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/windows-base:1.0
        Type: WINDOWS_CONTAINER
        EnvironmentVariables:
          - Name: S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref S3Bucket
      Name: freertos-codecommit-harness-build
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - choco install cyg-get -y --no-progress
                - cyg-get bash make bc
            build:
              commands:
                - New-Item -ItemType directory -Path C:\tools\cbmc
                - >
                  aws s3 cp "s3://$env:S3_BUCKET/cbmc/goto-cc.exe"
                  'C:\tools\cbmc\'
                - >
                  aws s3 cp "s3://$env:S3_BUCKET/cbmc/goto-instrument.exe"
                  'C:\tools\cbmc\'
                - >
                  aws s3 cp "s3://$env:S3_BUCKET/cbmc/goto-analyzer.exe"
                  'C:\tools\cbmc\'
                - cp C:\tools\cbmc\goto-cc.exe C:\tools\cbmc\goto-cl.exe
                - cp C:\tools\cbmc\goto-cc.exe C:\tools\cbmc\goto-link.exe
                - >
                  (Get-Content
                  demos\pc\windows\visual_studio\aws_demos.vcxproj).replace(
                  'v141', 'v140') |
                  Set-Content demos\pc\windows\visual_studio\aws_demos.vcxproj
                - >
                  (Get-Content
                  demos\pc\windows\visual_studio\aws_demos.vcxproj).replace(
                  '<BrowseInformation>true', '<BrowseInformation>false') |
                  Set-Content demos\pc\windows\visual_studio\aws_demos.vcxproj
                - >
                  (Get-Content
                  demos\pc\windows\visual_studio\aws_demos.vcxproj).replace(
                  '%(PreprocessorDefinitions)', 'CBMC=1;%(PreprocessorDefinitions)') |
                  Set-Content demos\pc\windows\visual_studio\aws_demos.vcxproj
                - >
                  (Get-Content
                  demos\pc\windows\visual_studio\aws_demos.vcxproj).replace(
                  '%(AdditionalIncludeDirectories)',
                  '..\..\..\..\cbmc\include;%(AdditionalIncludeDirectories)') |
                  Set-Content demos\pc\windows\visual_studio\aws_demos.vcxproj
                - Remove-Item -Path cbmc\include\WinBase.h
                - Remove-Item -Path cbmc\include\Windows.h
                - |
                  $env:Path = "C:\tools\cbmc;C:\Program Files (x86)\MSBuild\14.0\Bin;$env:Path"
                  msbuild /p:CLToolExe=goto-cl.exe /p:LinkToolExe=goto-link.exe /p:Platform=win32 /m:8 demos\pc\windows\visual_studio\aws_demos.sln
                - |
                  # https://stackoverflow.com/questions/20077820/how-can-i-source-variables-from-a-bat-file-into-a-powershell-script
                  cmd /c '"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86 && set' | `
                  .{process{ if ($_ -match '^([^=]+)=(.*)') { Set-Variable $matches[1] $matches[2] } }}
                  $env:Path = "C:\tools\cygwin\bin;C:\tools\cbmc;$Path;$env:Path"
                  $env:INCLUDE = $INCLUDE
                  Set-Location -Path cbmc\proofs
                  (Get-Content Makefile).replace(`
                    ' --function harness -o ', ' --function harness -Fe') | `
                    Set-Content Makefile
                  (Get-Content Makefile).replace(' -o ', ' -c -Fo') | Set-Content Makefile
                  (Get-Content Makefile).replace(' -m32', '') | Set-Content Makefile
                  Get-ChildItem . -Attributes Directory |
                  Foreach-Object {
                    $entry = $_.Basename
                    $makefile = "$(_)/Makefile"
                    (Get-Content $makefile) -replace `
                      '\$\(FREERTOS\).*/([A-Za-z_]*).goto', `
                      '$(FREERTOS)/demos/pc/windows/visual_studio/Debug/$1.obj' | `
                      Set-Content $makefile
                    $freertos_top = "../.."
                    Echo "Entry-point $entry"
                    Echo "FreeRTOS top-level $freertos_top"
                    bash -c "make -f $makefile $entry.yaml \
                             FREERTOS=$freertos_top GOTO_CC=goto-cl.exe \
                             CBMCPKG=cbmc BATCHPKG=cbmc-batch VIEWERPKG=cbmc-viewer"
                    If ($LASTEXITCODE -ne 0) { Exit $LASTEXITCODE }
                  }
          artifacts:
            files:
              - cbmc/proofs/*.goto
              - cbmc/proofs/*.yaml
            discard-paths: yes

  RTOSHarnessToS3:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/ubuntu-base:14.04
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref S3Bucket
      Name: freertos-harness-to-s3
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - aws s3 sync --delete . "s3://$S3_BUCKET/rtos-harness/"

  RTOSCodeCommitToS3:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/ubuntu-base:14.04
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref S3Bucket
      Name: freertos-codecommit-to-s3
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - aws s3 sync --delete . "s3://$S3_BUCKET/rtos-arg/"

  RTOSGitHubToS3:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/ubuntu-base:14.04
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref S3Bucket
      Name: freertos-github-to-s3
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - aws s3 sync --delete . "s3://$S3_BUCKET/rtos-public/"

  GitHubTokenSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "GitHubTokenInSSM"
      Type: String
      Value: !Ref GitHubToken

  ARGToS3:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/ubuntu-base:14.04
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref S3Bucket
      Name: arg-patches-to-s3
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          env:
            parameter-store:
              GITHUBTOKEN: "GitHubTokenInSSM"
          phases:
            build:
              commands:
                - |
                  git clone --branch arg-cbmc --depth 50 \
                    https://$GITHUBTOKEN@github.com/tautschnig/amazon-freertos-staging
                  cd amazon-freertos-staging
                  git log --pretty='format:%H,%ae' | \
                    egrep -m1 -v ',(dsn|mrtuttle|tautschn|mt)@' | cut -f1 -d, > base
                  git format-patch -o arg-patches $(cat base)..HEAD
                  tar czf arg-patches.tar.gz arg-patches
                  aws s3 cp arg-patches.tar.gz "s3://$S3_BUCKET/arg-patches.tar.gz"

  PatchStaging:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/ubuntu-base:14.04
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref S3Bucket
      Name: patch-staging
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - aws s3 cp "s3://$S3_BUCKET/arg-patches.tar.gz" arg-patches.tar.gz
                - tar xzf arg-patches.tar.gz
                  #- for f in arg-patches/* ; do patch -p1 < $f || exit 1 ; done
                - rm arg-patches.tar.gz
          artifacts:
            files:
              - '**/*'

  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Amazon FreeRTOS Verification"
      TopicName: "amazon-freertos-verification"

  SnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref NotificationAddress
      Protocol: email
      TopicArn: !Ref SnsTopic

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      RoleName: !Sub "codepipeline-role-${AWS::Region}"
      Policies:
        - PolicyName: !Sub "codepipeline-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Effect: Allow
                Resource:
                  - !GetAtt CBMCWindowsBuild.Arn
                  - !GetAtt RTOSCodeCommitAnalysisToS3.Arn
                  - !GetAtt RTOSCodeCommitToS3.Arn
                  - !GetAtt RTOSHarnessToS3.Arn
                  - !GetAtt RTOSGitHubToS3.Arn
                  - !GetAtt RTOSPipelinedGotoCLBuild.Arn
                  - !GetAtt RTOSPipelinedHarnessBuild.Arn
                  - !GetAtt RTOSPipelinedNativeAnalysis.Arn
                  - !GetAtt RTOSPipelinedNativeBuild.Arn
                  - !GetAtt ARGToS3.Arn
                  - !GetAtt PatchStaging.Arn
              - Action:
                  - s3:PutObject
                Effect: Allow
                Resource: !Join ["/", [!GetAtt S3Bucket.Arn, "*"]]
              - Action:
                  - lambda:ListFunctions
                Effect: Allow
                Resource: "*"
              - Action:
                  - lambda:InvokeFunction
                Effect: Allow
                Resource:
                  - !GetAtt InvokeBatchLambda.Arn
                  - !GetAtt BatchStatusLambda.Arn

  RTOSCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: "rtos-pipeline"
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref S3Bucket
      Stages:
        - Name: "Source"
          Actions:
            - Name: "RTOS-Staging"
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: aws
                Repo: amazon-freertos-staging
                Branch: master
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: True
              OutputArtifacts:
                - Name: "rtos-dev"
            - Name: "RTOS-Staging-ARG"
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: karkhaz
                Repo: amazon-freertos-staging
                Branch: arg-cbmc
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: True
              OutputArtifacts:
                - Name: "rtos-arg"
            - Name: "CBMC"
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: diffblue
                Repo: cbmc
                Branch: develop
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: True
              OutputArtifacts:
                - Name: "cbmc-src"
            - Name: "RTOS-Public"
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: aws
                Repo: amazon-freertos
                Branch: master
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: True
              OutputArtifacts:
                - Name: "rtos-pub"
        - Name: "Prepare"
          Actions:
            - Name: "CBMC-Windows"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CBMCWindowsBuild
              InputArtifacts:
                - Name: "cbmc-src"
              OutputArtifacts:
                - Name: "goto-cl"
              RunOrder: 1
            - Name: "Patch-to-S3"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref ARGToS3
              InputArtifacts:
                - Name: "rtos-arg"
              RunOrder: 1
            - Name: "Patch-Staging"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref PatchStaging
              InputArtifacts:
                - Name: "rtos-dev"
              OutputArtifacts:
                - Name: "patched"
              RunOrder: 2
        - Name: "Native-Builds"
          Actions:
            - Name: "FreeRTOS-staging-native"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref RTOSPipelinedNativeBuild
              InputArtifacts:
                - Name: "patched"
              RunOrder: 1
            - Name: "FreeRTOS-staging-codeanalysis"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref RTOSPipelinedNativeAnalysis
              InputArtifacts:
                - Name: "patched"
              OutputArtifacts:
                - Name: "vs-anl"
              RunOrder: 1
            - Name: "CodeAnalysis-to-S3"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref RTOSCodeCommitAnalysisToS3
              InputArtifacts:
                - Name: "vs-anl"
              RunOrder: 2
        - Name: "Goto-CL-Builds"
          Actions:
            - Name: "Harness-Build"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref RTOSPipelinedHarnessBuild
              InputArtifacts:
                - Name: "patched"
              OutputArtifacts:
                - Name: "h-build"
              RunOrder: 1
            - Name: "Harness-to-S3"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref RTOSHarnessToS3
              InputArtifacts:
                - Name: "h-build"
              RunOrder: 2
            - Name: "Staging-Build"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref RTOSPipelinedGotoCLBuild
              InputArtifacts:
                - Name: "patched"
              OutputArtifacts:
                - Name: "arg-build"
              RunOrder: 1
            - Name: "Staging-to-S3"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref RTOSCodeCommitToS3
              InputArtifacts:
                - Name: "arg-build"
              RunOrder: 2
            - Name: "Public-Build"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref RTOSPipelinedGotoCLBuild
              InputArtifacts:
                - Name: "rtos-pub"
              OutputArtifacts:
                - Name: "pub-build"
              RunOrder: 1
            - Name: "Public-to-S3"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref RTOSGitHubToS3
              InputArtifacts:
                - Name: "pub-build"
              RunOrder: 2
        - Name: "Invoke-Batch"
          Actions:
            - Name: "Invoke-Batch"
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: 1
              Configuration:
                FunctionName: !Ref InvokeBatchLambda
                UserParameters: !Sub '
                  { "s3_bucket": "${S3Bucket}", "src_artifact": "patched",
                    "project_name": "${ProjectName}", "region": "${AWS::Region}"
                  }'
              InputArtifacts:
                - Name: "patched"
                - Name: "h-build"
              OutputArtifacts:
                - Name: "batch-job"
        - Name: "Batch-Status"
          Actions:
            - Name: "Batch-Status"
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: 1
              Configuration:
                FunctionName: !Ref BatchStatusLambda
                UserParameters: !Sub '
                  { "project_name": "${ProjectName}", "region": "${AWS::Region}"
                  }'
              InputArtifacts:
                - Name: "batch-job"

  EventTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref SnsTopic
      Topics:
        - !Ref SnsTopic

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "CodePipeline failure rule"
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - "CodePipeline Action Execution State Change"
        detail:
          state:
            - FAILED
          pipeline:
            - !Ref RTOSCodePipeline
      State: ENABLED
      Targets:
        - Arn: !Ref SnsTopic
          Id: "PipelineTopic"
          InputTransformer:
            InputTemplate: !Sub '"The pipeline <state> at stage <stage> to perform <action>. Go to https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/"'
            InputPathsMap:
              state: "$.detail.state"
              stage: "$.detail.stage"
              action: "$.detail.action"
